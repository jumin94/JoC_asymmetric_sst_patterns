#Evaluate precipitation sensitivity to remote drivers 

#---------------------------------------------------IMPORTS---------------------------------------------------
import numpy as np
import pandas as pd
import xarray as xr
import os, fnmatch
import glob
import utilities.open_data as od
import utilities.regression as reg_am
import utilities.csv2nc
import warnings
warnings.filterwarnings("ignore")

#---------------------------------------------------LOAD DATA--------------------------------------------------------
#Define path, model list and experiments
ruta = '/datos/julia.mindlin/CMIP6_ensambles/preprocesados' #ruta a los datos 
models = [
    'ACCESS-CM2', 'ACCESS-ESM1-5', 'BCC-CSM2-MR', 'CAMS-CSM1-0',
    'CanESM5', 'CESM2_', 'CESM2-WACCM','CMCC-CM2-SR5','CNRM-CM6-1',
    'CNRM-ESM2-1','EC-Earth3', 'FGOALS-g3', 'HadGEM3-GC31-LL','HadGEM3-GC31-MM',
    'IITM-ESM','INM-CM4-8','INM-CM5-0','KACE-1-0-G',
    'MIROC6','MIROC-ES2L', 'MPI-ESM1-2-HR', 'MPI-ESM1-2-LR',
    'MRI-ESM2-0', 'NESM3', 'NorESM2-LM', 'NorESM2-MM', 'TaiESM1','UKESM1-0-LL'
    ]
scenarios = ['historical','ssp585']
os.chdir(ruta)
os.getcwd()

#Create dictionary with data files
var = 'mon/pr'
dato = od.cargo_todo(scenarios,models,ruta,var)

#Load remote driver change in each model (indices)
#Open indices - los mismos de siempre
path_results = '/home/julia.mindlin/Tesis/JoC_paper/JoC_results'
gloW  = pd.read_csv(path_results+'/indices_CMIP6/GW_index_DJF.csv')
gw_index = gloW.iloc[:,2].values
ta = pd.read_csv(path_results+'/indices_CMIP6/TA_index_DJF.csv')
vb = pd.read_csv(path_results+'/indices_CMIP6/VB_index_DJF.csv')
sst_C_std = pd.read_csv(path_indices_DJF+'/indices_CMIP6/C_std_asym_index_DJF.csv')
sst_E_std = pd.read_csv(path_indices_DJF+'/indices_CMIP6/E_std_asym_index_DJF.csv')
#Select values
TA = ta.iloc[:,2].values
VB = VB.iloc[:,2].values
SST_C_std = sst_C_std.iloc[:,2].values
SST_E_std = sst_E_std.iloc[:,2].values
#--------------------------------------------------CALCULATIONS--------------------------------------------------
#Create regression class
reg = reg_am.across_models()
var = 'pr'
#Generate regression data
reg.regression_data(dato,scenarios,models,gw_index,var)
#Create folder to save data if necessary
os.chdir(path_results)
os.getcwd()
os.makedirs('sensitivity_maps_CMIP6',exist_ok=True)
os.chdir(path_results+'/sensitivity_maps_CMIP6')
os.getcwd()
os.makedirs(var,exist_ok=True)
#Perform regression
path_maps = path_results+'/sensitivity_maps_CMIP6/'+var
indices = [TA,VB,SST_C_std,SST_E_std] 
indices_names = ['TA','VB','C_index','E_index'] 
reg.perform_regression(indices,indices_names,gw_index,path_maps)
#Create .nc files from .csv generated by the regression function
file_list = utilities.csv2nc.csv_to_nc(path_maps)
